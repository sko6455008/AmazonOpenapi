// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /amazon)
	AddAmazon(ctx echo.Context) error

	// (PATCH /amazon/active/{asin})
	ActiveAmazon(ctx echo.Context, asin string) error

	// (PATCH /amazon/inactive/{asin})
	InactiveAmazon(ctx echo.Context, asin string) error

	// (DELETE /amazon/{asin})
	DeleteAmazon(ctx echo.Context, asin string) error

	// (GET /amazon/{asin})
	GetAmazon(ctx echo.Context, asin string) error

	// (PATCH /amazon/{asin})
	PatchAmazon(ctx echo.Context, asin string) error

	// (PUT /amazon/{asin})
	PutAmazon(ctx echo.Context, asin string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) AddAmazon(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddAmazon(ctx)
	return err
}

// ActiveAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) ActiveAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ActiveAmazon(ctx, asin)
	return err
}

// InactiveAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) InactiveAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InactiveAmazon(ctx, asin)
	return err
}

// DeleteAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAmazon(ctx, asin)
	return err
}

// GetAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) GetAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAmazon(ctx, asin)
	return err
}

// PatchAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAmazon(ctx, asin)
	return err
}

// PutAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) PutAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAmazon(ctx, asin)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/amazon", wrapper.AddAmazon)
	router.PATCH(baseURL+"/amazon/active/:asin", wrapper.ActiveAmazon)
	router.PATCH(baseURL+"/amazon/inactive/:asin", wrapper.InactiveAmazon)
	router.DELETE(baseURL+"/amazon/:asin", wrapper.DeleteAmazon)
	router.GET(baseURL+"/amazon/:asin", wrapper.GetAmazon)
	router.PATCH(baseURL+"/amazon/:asin", wrapper.PatchAmazon)
	router.PUT(baseURL+"/amazon/:asin", wrapper.PutAmazon)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/cRBj+K6OBo7GXpOLgE4FGKBKikcKtitBb+93dKbZnmHmdtEQrsVlK+ZIqQGpV",
	"euCCULhEHDhwoOXHuBuUf4Fmxu5+2BWLmoYe9jY7H+/H8zz7jOeIJzJXssCCDI+PuEmGmIMbbuXwqSzs",
	"SGmpUJNANw9GuFm6rZDH3JAWxYCPAp7Dx6g7VwrIsXNBaZHMr4iCcIDaLmkEI7sTlTrrmHdnPimFxpTH",
	"123RaZnQRy53XVzzw6d9lsNHDHxn+0ETWN64iQnZhB6KXaBk2MbjRdruS50D+cbfusKDC8Kh1cC21lK3",
	"S09k2ipjc6OzjByNgQH+O+4u5mx/G057QBR96QsoCBKyQ8xBZDzmoAQh5G+bQxgMUIdC8gZJvufn2Nbu",
	"DvsQIa+Zi/mQSMVRNHdmFPAUTaKFImHh41vMQK4ydIdpCMRKg4YBU0iGpEYGhkHB8JbfRpKlmMvCkAZC",
	"1kegUqNhomA0RHZNYWEjbYY9ZhQmoi8ScKkCnokEC+OwqgvfUpAMkW2EvYWSTRxFh4eHIbjlUOpBVJ81",
	"0fs7725/sLf9xkbYC4eUZ7YjQp2ba/091AdOQO2+I7clshQKyuYx263b5AE/QG08KG+GvbBnI0uFBSjB",
	"Y77ppgKugIZOJBHMjEAax9UispCmLAUC7sJoh8JOartO09pEvETQ0Dsyvd0Qj4ULBkplNXbRzVrq3obs",
	"6HWNfR7z16KZT0W1SUV1cKeoJbLdiuXQFkfSUda0P1Mr6RKdfI2SFnSbcKPXu4QCPaasyezl2ocyowtL",
	"7v/zHbnLAm8pTAhThs2eUdDwHEFC4gCjI+uGI8d643tLLRhRVMffn317d3r6YzV+UI1/mT75dXpn0taB",
	"i/hMCgo05EioDY+vL0f1IVy4n6rx59XkbjX5szr+qxqfOnu23sFjp86ZL9Qri8QGczgtW9b+mvRF0kXx",
	"IrR/9fX5w59btO/UMVck3gVZE3/JxM/4TjFDwjbhft7elEYUgwxZ3c0NMJgy6a/DnavMlLZ4TFs6uOoC",
	"rKYCWw2T/SaHu4RdWS+L/isdCve5feL0fycr4APsuHUHSN237ntIK2Ltds3/0ab37k+fPFj/1S6UvdV9",
	"9Okfn51PTv5+fHp271GLVvf6WI3YavJdNZlUk/GluOnL+q7zz60OmM8nJ9Mvvzh79PvZ/d+q8cPq+Jsl",
	"Ja+/8Z4nxbLDSFT5HCPZLV8hI7nM18P0zsnTxz+sBfafPytGATeoDxqVLLzNm2d2OPdYtS/O0f7onwAA",
	"AP//bdQFooUSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

